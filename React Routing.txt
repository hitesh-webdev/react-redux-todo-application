=> Multi Page Application
Multiple ReactDOM.render() call per widget(containing react component).

=> Array.concat() is the immutable way to change the value of an array, rather than pushing
to the new value to the exisiting array.

=> In a reducer we do not have the access to the complete state, only the state part changed
by the reducer. We send the required part of the state into a different reducer using the 
action payload.

=> this.setState() mehtod can be invoked with partial state values, and we are not required to
pass the entire state to it.

/* Deployment Steps
========================================================================== */

1. Adjust Basepath: <BrowserRouter basename="/my-app/">

Note- This has to done if our app is served from the some custom path other than root path
of the server.

2. npm run build

3. Upload the build files to the static server.


/* Diving Deeper into Components
===================================================================== */

=> Pure Component

Pure component has its own implementation of shouldComponentUpdate() lifecycle method, which 
decreases our overhead to implement it our self and increases application performance.

Note- This should only be used in root level component which are responsible to update child 
components by passing props. As implementing this in every component will again lead to checking
of props and state every time and in each component, which degrades the performance of the 
application. 

=> Virtual DOM

React doesn't really updates the DOM on calling the render() method inside the component. Rather it
updates the Virtual DOM. It also maintains 2 copies of Virtual DOM(old and new). If it finds 
any significant diff between the 2 virtual DOMs, then only the real DOM is updated and that too
very optimally. 

=> Returning Adjacent elements rather than a single root element from render()

From React 16 onwards, we can return an array of Adjacent(sibling) JSX elements without having to
wrap it in a single root element.

Note= The elements in the array should have a key arrtibute on them.

=> Higher Order Components

It wraps a component and adds some logic to it. We make HOCs to wrap multiple components which
are required to add some logic to them.

We can make HOCs in two ways: 

1. Wrapping element - By making use of props.children for the normal component.
2. Function - By passing the normal component as an argument to this HOC. 

Note- We have to pass the props of the normal component from HOCs using the spread(...props) 
operator.

Note- We can also return a class(stateful components) from HOCs.

=> Correct way of calling this.setState()

React calls this.setState() method asynchronously, so when our new state depends on the value of
our old state(eg- counter), that is, 'this.state' is getting used inside this method, then we 
should always call it as:

this.setState((prevState, props) => {
    return {
        counter: prevState.counter + 1;
    }
});

=> Props Validation

npm install --save prop-types

import PropTypes from 'prop-types';

By going below class definition and adding PropTypes property. Basically editing the class after
it was defined.

Person.propTypes = {
    name: PropTypes.string,
    age: PropTypes.number,
    change: PropTypes.func
};

Note- It doesn't works in Presentational components, which by the way have to just print the 
received props on the screen.

=> Element Reference

<input ref={(ele) => { this.inputElement = ele }}

Note- Here 'inputElement' becomes a property of the class. This should not be used to change
styling of the element dynamically, rather it should be used for focus() or click().
They are only available in stateful components.
This is set when the render() method is called, so we can make use of it in componentDidMount().


/* Making asynchronous API calls
==================================================================== */

We can set up action creators using redux-thunk which can return a function(which will ultimately
dispatch an action after the asynchronous call response arrives) rather than returning an action 
instantly.

Note- thunk is setup as a middleware which blocks our returned function until async call response 
arrives.

const fetchPost = () => {
    return (dispatch, getState) => {
        axios.get('/get').then((response) => {
            counter = getState().counter;
            dispatch(displayPost(response, counter));
        })
    }
}

Note- Here displayPost is another action creator which instantly dispatches an action to render the
fetched post on the screen.

Also we can access the current state by making the call to the getState() whose reference is 
provided in the second argument of the return function from async action creator. But do not 
over use it, rather accept the required state variable in the parameter to this action creator
function. 



/* Routing
===================================================================== */

=> Packages to be imported
react-router
react-router-dom

=> Setting up routing in the application

import { BrowserRouter } from 'react-router-dom';

<BrowserRouter>
    <div className="App">
        <Blog />
    </div>
</BrowserRouter>

Note- This object should wrap the component in your app which should support routing.

=> Setting up routes in the JSX of the component where we want to show the components via routing

import { Route } from 'react-router-dom';

<Route path="/" exact render={() => <Home/>} />
<Route path="/" exact component={Home} />

Note- This will render the Home component in the JSX of the root/parent component when the URL 
route exactly matches '/'.

Note- 'render' property should be used to display short JSX or short static message.
You should never put an entire component in 'render' property, that would mess up the code, 
rather use the component property to render an entire component.

=> Using Links to switch pages

import { Link } from 'react-router-dom';

<Link to="/">Home</Link>

<Link to={{
    pathname: '/new-post',
    hash: '#submit',         // Adding fragments to the end of the URL
    search: '?quick-submit=true'           // Adding query parameters to the URL
}}>New Post</Link>

Note- Using Link component will not reload the page, unlike <a href=""></a> and will keep the 
characteristics of a single page application, keeping the state of the application intact.

=> Routing related props(provided by react-router)

console.log(this.props);

{
    history: {}
    location: { hash: '', search: '', pathname: '' }               // using this we can parse the 
    match: { isExact: true }   // whether path matched exactly     // parameters in the URL
}

Note- We can access them in componentDidMount() lifecycle method, as the component is removed and added to the DOM all the time.

Note- The routing related props are not passed down the component tree, that is, it will not be 
available in the components embedded in the JSX of the parent component.

=> To achieve this we can use higher order component 'withRouter'

import { withRouter } from 'react-router-dom';

export default withRouter(post);

Note- This makes the 'post' component route aware, and will receive props containing the information
of the nearest loaded route.

=> Styling the Active Link

import { NavLink } from 'react-router-dom';

<NavLink to="/" exact>Home</NavLink>

Note- This component has additional props which lets us style the current active route link, unlike
the Link component. This will apply the 'active' class to the currently active link.

Note- We can also determine the active class name to be used rather than 'active', we can specify a
prop called 'activeClassName' on the NavLink component.
We can also provide CSS styles in the 'activeStyle' prop.

=> Using switch to load only a single route at a time 

import { Switch } from 'react-router-dom';

<Switch>
    <Route path="/" exact render={() => <h1>Hello</h1>} />
    <Route path="/" exact component={Home} />
</Switch>

Note- This will stop loading other routes(if any) after matching the very first route.
We can also put some routes inside the switch and other routes outside it according to our needs.

=> Navigating Programatically(using route realted props)

this.props.history.push({pathname: '/new-post'});       // pushing component to the navigation stack

or

this.props.history.push('/new-post');

=> Redirecting route requests

import { Switch, Redirect } from 'react-router-dom';

<Switch>
    <Redirect from="/" to="/posts" />
</Switch>

Note- We cannot use the 'from' prop from outside the 'Switch' component.

=> Using the History prop to redirect route requests

Redirect replaces the current page on the navigation stack and doesn't push a new one. On the other
hand this.props.history.push() method pushes a new page on the navigation stack, so we can use 
this.props.history.replace() method to achieve the same behaviour as Redirect.

=> Working with Guards

<Switch>
    { this.state.auth === true ? <Route path="/add-post" component={AddPost} /> : null}
    <Route path="/posts" component="Posts" />
    <Route from="/" to="/posts">
</Switch>

Note- If the 'auth' field in the state object is true, then only the user is allowed to access the 
given route else not.

or

// AddPost component page

componentDidMount() {
    if(this.state.auth === false) {
        this.props.history.replace('/posts');
    }
}

=> Handling 404 requests

Keep the last route in the switch statement to handle all the 404 requests, as it is the default
route which will be rendered if no other above routes match with it. 
Also, we can also use <Redirect/> as the last route in the switch component to handle such requests.


/* Form Validation
===================================================================== */

From React 16+ onwards we cannot keep the name of the custom props as camelCase or PascalCase.
We have to keep it all lowercase otherwise it will give an error.

